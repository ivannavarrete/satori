#############################################################################
# Makefile for building: satori
# Generated by qmake (2.00a) (Qt 4.0.0) on: Wed Dec 14 02:23:57 2005
# Project:  satori.pro
# Template: app
# Command: /usr/qt/4/bin/qmake -o Makefile satori.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
LEX           = flex
YACC          = yacc
DEFINES       = -DQT_NO_DEBUG -DQT_CORE_LIB -DQT_GUI_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
LEXFLAGS      = 
YACCFLAGS     = -d
INCPATH       = -I/usr/qt/4/mkspecs/linux-g++ -I. -I/usr/qt/4/include/QtGui -I/usr/qt/4/include/QtCore -I/usr/qt/4/include -I. -I.
LINK          = g++
LFLAGS        = -Wl,-rpath,/usr/qt/4/lib
LIBS          = $(SUBLIBS) -L/usr/qt/4/lib -L/usr/src/qt4/qt-x11-opensource-desktop-4.0.0/lib -lQtGui -L/usr/X11R6/lib -lpng -lSM -lICE -lXi -lXrender -lXrandr -lXcursor -lXinerama -lfreetype -lfontconfig -lXext -lX11 -lm -lQtCore -lz -ldl -lpthread
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/qt/4/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
INSTALL_FILE  = $(COPY_FILE)
INSTALL_DIR   = $(COPY_DIR)
DEL_FILE      = rm -f
SYMLINK       = ln -sf
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cpp \
		ui/txt/basetxtui.cpp \
		ui/txt/basecommandtable.cpp \
		lib/command/commandtable.cpp \
		lib/command/command.cpp \
		lib/command/argument.cpp \
		lib/command/wordargument.cpp \
		lib/command/stringargument.cpp \
		lib/command/numberargument.cpp moc_basetxtui.cpp
OBJECTS       = main.o \
		basetxtui.o \
		basecommandtable.o \
		commandtable.o \
		command.o \
		argument.o \
		wordargument.o \
		stringargument.o \
		numberargument.o \
		moc_basetxtui.o
DIST          = /usr/qt/4/mkspecs/qconfig.pri \
		/usr/qt/4/mkspecs/features/qt_config.prf \
		/usr/qt/4/mkspecs/features/exclusive_builds.prf \
		/usr/qt/4/mkspecs/features/default_pre.prf \
		/usr/qt/4/mkspecs/features/release.prf \
		/usr/qt/4/mkspecs/features/default_post.prf \
		/usr/qt/4/mkspecs/features/warn_on.prf \
		/usr/qt/4/mkspecs/features/qt.prf \
		/usr/qt/4/mkspecs/features/unix/thread.prf \
		/usr/qt/4/mkspecs/features/moc.prf \
		/usr/qt/4/mkspecs/features/resources.prf \
		/usr/qt/4/mkspecs/features/uic.prf \
		satori.pro
QMAKE_TARGET  = satori
DESTDIR       = 
TARGET        = satori

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: satori.pro  /usr/qt/4/mkspecs/linux-g++/qmake.conf /usr/qt/4/mkspecs/qconfig.pri \
		/usr/qt/4/mkspecs/features/qt_config.prf \
		/usr/qt/4/mkspecs/features/exclusive_builds.prf \
		/usr/qt/4/mkspecs/features/default_pre.prf \
		/usr/qt/4/mkspecs/features/release.prf \
		/usr/qt/4/mkspecs/features/default_post.prf \
		/usr/qt/4/mkspecs/features/warn_on.prf \
		/usr/qt/4/mkspecs/features/qt.prf \
		/usr/qt/4/mkspecs/features/unix/thread.prf \
		/usr/qt/4/mkspecs/features/moc.prf \
		/usr/qt/4/mkspecs/features/resources.prf \
		/usr/qt/4/mkspecs/features/uic.prf \
		/usr/qt/4/lib/libQtCore.prl \
		/usr/qt/4/lib/libQtGui.prl
	$(QMAKE) -o Makefile satori.pro
/usr/qt/4/mkspecs/qconfig.pri:
/usr/qt/4/mkspecs/features/qt_config.prf:
/usr/qt/4/mkspecs/features/exclusive_builds.prf:
/usr/qt/4/mkspecs/features/default_pre.prf:
/usr/qt/4/mkspecs/features/release.prf:
/usr/qt/4/mkspecs/features/default_post.prf:
/usr/qt/4/mkspecs/features/warn_on.prf:
/usr/qt/4/mkspecs/features/qt.prf:
/usr/qt/4/mkspecs/features/unix/thread.prf:
/usr/qt/4/mkspecs/features/moc.prf:
/usr/qt/4/mkspecs/features/resources.prf:
/usr/qt/4/mkspecs/features/uic.prf:
/usr/qt/4/lib/libQtCore.prl:
/usr/qt/4/lib/libQtGui.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile satori.pro

dist: 
	@$(CHK_DIR_EXISTS) ".tmp/satori1.0.0" || $(MKDIR) ".tmp/satori1.0.0"
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/satori1.0.0/ && $(COPY_FILE) --parents lib/tree.h ui/txt/txtuiinterface.h ui/txt/basetxtui.h ui/txt/basecommandtable.h lib/command/commandtable.h lib/command/command.h lib/command/argument.h lib/command/wordargument.h lib/command/stringargument.h lib/command/numberargument.h .tmp/satori1.0.0/ && $(COPY_FILE) --parents main.cpp ui/txt/basetxtui.cpp ui/txt/basecommandtable.cpp lib/command/commandtable.cpp lib/command/command.cpp lib/command/argument.cpp lib/command/wordargument.cpp lib/command/stringargument.cpp lib/command/numberargument.cpp .tmp/satori1.0.0/ && (cd `dirname .tmp/satori1.0.0` && $(TAR) satori1.0.0.tar satori1.0.0 && $(COMPRESS) satori1.0.0.tar) && $(MOVE) `dirname .tmp/satori1.0.0`/satori1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/satori1.0.0


yaccclean:
lexclean:
clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


/usr/qt/4/bin/moc:
	(cd "$(QTDIR)/src/tools/moc" && $(MAKE))

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_basetxtui.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_basetxtui.cpp
moc_basetxtui.cpp: ui/txt/txtuiinterface.h \
		lib/command/command.h \
		lib/tree.h \
		lib/command/argument.h \
		lib/command/commandtable.h \
		lib/command/wordargument.h \
		lib/command/stringargument.h \
		lib/command/numberargument.h \
		ui/txt/basecommandtable.h \
		ui/txt/basetxtui.h \
		/usr/qt/4/bin/moc
	/usr/qt/4/bin/moc $(DEFINES) $(INCPATH) ui/txt/basetxtui.h -o moc_basetxtui.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all:
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_clean: compiler_moc_header_clean compiler_rcc_clean compiler_image_collection_clean compiler_moc_source_clean compiler_uic_clean 

####### Compile

main.o: main.cpp ui/txt/basetxtui.h \
		ui/txt/txtuiinterface.h \
		lib/command/command.h \
		lib/tree.h \
		lib/command/argument.h \
		lib/command/commandtable.h \
		lib/command/wordargument.h \
		lib/command/stringargument.h \
		lib/command/numberargument.h \
		ui/txt/basecommandtable.h

basetxtui.o: ui/txt/basetxtui.cpp ui/txt/basetxtui.h \
		ui/txt/txtuiinterface.h \
		lib/command/command.h \
		lib/tree.h \
		lib/command/argument.h \
		lib/command/commandtable.h \
		lib/command/wordargument.h \
		lib/command/stringargument.h \
		lib/command/numberargument.h \
		ui/txt/basecommandtable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o basetxtui.o ui/txt/basetxtui.cpp

basecommandtable.o: ui/txt/basecommandtable.cpp ui/txt/basecommandtable.h \
		lib/command/commandtable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o basecommandtable.o ui/txt/basecommandtable.cpp

commandtable.o: lib/command/commandtable.cpp lib/command/commandtable.h \
		lib/command/command.h \
		lib/tree.h \
		lib/command/argument.h \
		lib/command/wordargument.h \
		lib/command/stringargument.h \
		lib/command/numberargument.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o commandtable.o lib/command/commandtable.cpp

command.o: lib/command/command.cpp lib/command/command.h \
		lib/tree.h \
		lib/command/argument.h \
		lib/command/commandtable.h \
		lib/command/wordargument.h \
		lib/command/stringargument.h \
		lib/command/numberargument.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o command.o lib/command/command.cpp

argument.o: lib/command/argument.cpp lib/command/argument.h \
		lib/command/commandtable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o argument.o lib/command/argument.cpp

wordargument.o: lib/command/wordargument.cpp lib/command/wordargument.h \
		lib/command/argument.h \
		lib/command/commandtable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o wordargument.o lib/command/wordargument.cpp

stringargument.o: lib/command/stringargument.cpp lib/command/stringargument.h \
		lib/command/argument.h \
		lib/command/commandtable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o stringargument.o lib/command/stringargument.cpp

numberargument.o: lib/command/numberargument.cpp lib/command/numberargument.h \
		lib/command/argument.h \
		lib/command/commandtable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o numberargument.o lib/command/numberargument.cpp

moc_basetxtui.o: moc_basetxtui.cpp 

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

