#############################################################################
# Makefile for building: unittest
# Generated by qmake (2.00a) (Qt 4.0.0) on: Fri Dec  2 01:07:32 2005
# Project:  unittest.pro
# Template: app
# Command: /usr/qt/4/bin/qmake -o Makefile unittest.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
LEX           = flex
YACC          = yacc
DEFINES       = -DQT_CORE_LIB -DQT_GUI_LIB -DQT_SHARED
CFLAGS        = -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
LEXFLAGS      = 
YACCFLAGS     = -d
INCPATH       = -I/usr/qt/4/mkspecs/linux-g++ -I. -I/usr/qt/4/include/QtGui -I/usr/qt/4/include/QtCore -I/usr/qt/4/include -I.. -I. -I.
LINK          = g++
LFLAGS        = -Wl,-rpath,/usr/qt/4/lib
LIBS          = $(SUBLIBS) -L/usr/qt/4/lib -lcppunit -L/usr/src/qt4/qt-x11-opensource-desktop-4.0.0/lib -lQtGui_debug -L/usr/X11R6/lib -lpng -lSM -lICE -lXi -lXrender -lXrandr -lXcursor -lXinerama -lfreetype -lfontconfig -lXext -lX11 -lm -lQtCore_debug -lz -ldl -lpthread
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/qt/4/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
INSTALL_FILE  = $(COPY_FILE)
INSTALL_DIR   = $(COPY_DIR)
DEL_FILE      = rm -f
SYMLINK       = ln -sf
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cpp \
		signalcatcher.cpp \
		../comm/serial_u.cpp \
		../comm/test/serialtest.cpp \
		../lib/test/treetest.cpp \
		../ui/txt/argument.cpp \
		../ui/txt/test/argumenttest.cpp \
		../ui/txt/numberargument.cpp \
		../ui/txt/test/numberargumenttest.cpp \
		../ui/txt/stringargument.cpp \
		../ui/txt/test/stringargumenttest.cpp \
		../ui/txt/wordargument.cpp \
		../ui/txt/test/wordargumenttest.cpp \
		../ui/txt/command.cpp \
		../ui/txt/test/commandtest.cpp \
		../ui/txt/commandtable.cpp \
		../ui/txt/test/commandtabletest.cpp \
		../ui/txt/basecommandtable.cpp moc_signalcatcher.cpp \
		moc_comm.cpp \
		moc_serial_u.cpp
OBJECTS       = main.o \
		signalcatcher.o \
		serial_u.o \
		serialtest.o \
		treetest.o \
		argument.o \
		argumenttest.o \
		numberargument.o \
		numberargumenttest.o \
		stringargument.o \
		stringargumenttest.o \
		wordargument.o \
		wordargumenttest.o \
		command.o \
		commandtest.o \
		commandtable.o \
		commandtabletest.o \
		basecommandtable.o \
		moc_signalcatcher.o \
		moc_comm.o \
		moc_serial_u.o
DIST          = /usr/qt/4/mkspecs/qconfig.pri \
		/usr/qt/4/mkspecs/features/qt_config.prf \
		/usr/qt/4/mkspecs/features/exclusive_builds.prf \
		/usr/qt/4/mkspecs/features/default_pre.prf \
		/usr/qt/4/mkspecs/features/debug.prf \
		/usr/qt/4/mkspecs/features/default_post.prf \
		/usr/qt/4/mkspecs/features/warn_on.prf \
		/usr/qt/4/mkspecs/features/qt.prf \
		/usr/qt/4/mkspecs/features/unix/thread.prf \
		/usr/qt/4/mkspecs/features/moc.prf \
		/usr/qt/4/mkspecs/features/resources.prf \
		/usr/qt/4/mkspecs/features/uic.prf \
		unittest.pro
QMAKE_TARGET  = unittest
DESTDIR       = 
TARGET        = unittest

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: unittest.pro  /usr/qt/4/mkspecs/linux-g++/qmake.conf /usr/qt/4/mkspecs/qconfig.pri \
		/usr/qt/4/mkspecs/features/qt_config.prf \
		/usr/qt/4/mkspecs/features/exclusive_builds.prf \
		/usr/qt/4/mkspecs/features/default_pre.prf \
		/usr/qt/4/mkspecs/features/debug.prf \
		/usr/qt/4/mkspecs/features/default_post.prf \
		/usr/qt/4/mkspecs/features/warn_on.prf \
		/usr/qt/4/mkspecs/features/qt.prf \
		/usr/qt/4/mkspecs/features/unix/thread.prf \
		/usr/qt/4/mkspecs/features/moc.prf \
		/usr/qt/4/mkspecs/features/resources.prf \
		/usr/qt/4/mkspecs/features/uic.prf \
		/usr/qt/4/lib/libQtCore_debug.prl \
		/usr/qt/4/lib/libQtGui_debug.prl
	$(QMAKE) -o Makefile unittest.pro
/usr/qt/4/mkspecs/qconfig.pri:
/usr/qt/4/mkspecs/features/qt_config.prf:
/usr/qt/4/mkspecs/features/exclusive_builds.prf:
/usr/qt/4/mkspecs/features/default_pre.prf:
/usr/qt/4/mkspecs/features/debug.prf:
/usr/qt/4/mkspecs/features/default_post.prf:
/usr/qt/4/mkspecs/features/warn_on.prf:
/usr/qt/4/mkspecs/features/qt.prf:
/usr/qt/4/mkspecs/features/unix/thread.prf:
/usr/qt/4/mkspecs/features/moc.prf:
/usr/qt/4/mkspecs/features/resources.prf:
/usr/qt/4/mkspecs/features/uic.prf:
/usr/qt/4/lib/libQtCore_debug.prl:
/usr/qt/4/lib/libQtGui_debug.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile unittest.pro

dist: 
	@$(CHK_DIR_EXISTS) ".tmp/unittest1.0.0" || $(MKDIR) ".tmp/unittest1.0.0"
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/unittest1.0.0/ && $(COPY_FILE) --parents signalcatcher.h ../comm/comm.h ../comm/serial_u.h ../comm/test/serialtest.h ../lib/tree.h ../lib/test/mock_tree.h ../lib/test/treetest.h ../ui/txt/argument.h ../ui/txt/test/argumenttest.h ../ui/txt/numberargument.h ../ui/txt/test/numberargumenttest.h ../ui/txt/stringargument.h ../ui/txt/test/stringargumenttest.h ../ui/txt/wordargument.h ../ui/txt/test/wordargumenttest.h ../ui/txt/command.h ../ui/txt/test/commandtest.h ../ui/txt/commandtable.h ../ui/txt/test/commandtabletest.h ../ui/txt/basecommandtable.h .tmp/unittest1.0.0/ && $(COPY_FILE) --parents main.cpp signalcatcher.cpp ../comm/serial_u.cpp ../comm/test/serialtest.cpp ../lib/test/treetest.cpp ../ui/txt/argument.cpp ../ui/txt/test/argumenttest.cpp ../ui/txt/numberargument.cpp ../ui/txt/test/numberargumenttest.cpp ../ui/txt/stringargument.cpp ../ui/txt/test/stringargumenttest.cpp ../ui/txt/wordargument.cpp ../ui/txt/test/wordargumenttest.cpp ../ui/txt/command.cpp ../ui/txt/test/commandtest.cpp ../ui/txt/commandtable.cpp ../ui/txt/test/commandtabletest.cpp ../ui/txt/basecommandtable.cpp .tmp/unittest1.0.0/ && (cd `dirname .tmp/unittest1.0.0` && $(TAR) unittest1.0.0.tar unittest1.0.0 && $(COMPRESS) unittest1.0.0.tar) && $(MOVE) `dirname .tmp/unittest1.0.0`/unittest1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/unittest1.0.0


yaccclean:
lexclean:
clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


/usr/qt/4/bin/moc:
	(cd "$(QTDIR)/src/tools/moc" && $(MAKE))

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_signalcatcher.cpp moc_comm.cpp moc_serial_u.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_signalcatcher.cpp moc_comm.cpp moc_serial_u.cpp
moc_signalcatcher.cpp: signalcatcher.h \
		/usr/qt/4/bin/moc
	/usr/qt/4/bin/moc $(DEFINES) $(INCPATH) signalcatcher.h -o moc_signalcatcher.cpp

moc_comm.cpp: ../comm/comm.h \
		/usr/qt/4/bin/moc
	/usr/qt/4/bin/moc $(DEFINES) $(INCPATH) ../comm/comm.h -o moc_comm.cpp

moc_serial_u.cpp: ../comm/comm.h \
		../comm/serial_u.h \
		/usr/qt/4/bin/moc
	/usr/qt/4/bin/moc $(DEFINES) $(INCPATH) ../comm/serial_u.h -o moc_serial_u.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all:
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_clean: compiler_moc_header_clean compiler_rcc_clean compiler_image_collection_clean compiler_moc_source_clean compiler_uic_clean 

####### Compile

main.o: main.cpp 

signalcatcher.o: signalcatcher.cpp signalcatcher.h

serial_u.o: ../comm/serial_u.cpp ../comm/serial_u.h \
		../comm/comm.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o serial_u.o ../comm/serial_u.cpp

serialtest.o: ../comm/test/serialtest.cpp ../comm/test/serialtest.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o serialtest.o ../comm/test/serialtest.cpp

treetest.o: ../lib/test/treetest.cpp ../lib/test/treetest.h \
		../lib/tree.h \
		../lib/test/mock_tree.h \
		../lib/test/mocknode.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o treetest.o ../lib/test/treetest.cpp

argument.o: ../ui/txt/argument.cpp ../ui/txt/argument.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o argument.o ../ui/txt/argument.cpp

argumenttest.o: ../ui/txt/test/argumenttest.cpp ../ui/txt/test/argumenttest.h \
		../ui/txt/argument.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o argumenttest.o ../ui/txt/test/argumenttest.cpp

numberargument.o: ../ui/txt/numberargument.cpp ../ui/txt/numberargument.h \
		../ui/txt/argument.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o numberargument.o ../ui/txt/numberargument.cpp

numberargumenttest.o: ../ui/txt/test/numberargumenttest.cpp ../ui/txt/test/numberargumenttest.h \
		../ui/txt/numberargument.h \
		../ui/txt/argument.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o numberargumenttest.o ../ui/txt/test/numberargumenttest.cpp

stringargument.o: ../ui/txt/stringargument.cpp ../ui/txt/stringargument.h \
		../ui/txt/argument.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o stringargument.o ../ui/txt/stringargument.cpp

stringargumenttest.o: ../ui/txt/test/stringargumenttest.cpp ../ui/txt/test/stringargumenttest.h \
		../ui/txt/stringargument.h \
		../ui/txt/argument.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o stringargumenttest.o ../ui/txt/test/stringargumenttest.cpp

wordargument.o: ../ui/txt/wordargument.cpp ../ui/txt/wordargument.h \
		../ui/txt/argument.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o wordargument.o ../ui/txt/wordargument.cpp

wordargumenttest.o: ../ui/txt/test/wordargumenttest.cpp ../ui/txt/test/wordargumenttest.h \
		../ui/txt/wordargument.h \
		../ui/txt/argument.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o wordargumenttest.o ../ui/txt/test/wordargumenttest.cpp

command.o: ../ui/txt/command.cpp ../ui/txt/command.h \
		../ui/txt/argument.h \
		../ui/txt/wordargument.h \
		../ui/txt/stringargument.h \
		../ui/txt/numberargument.h \
		../lib/tree.h \
		../ui/txt/commandtable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o command.o ../ui/txt/command.cpp

commandtest.o: ../ui/txt/test/commandtest.cpp ../ui/txt/test/commandtest.h \
		../ui/txt/command.h \
		../ui/txt/argument.h \
		../ui/txt/wordargument.h \
		../ui/txt/stringargument.h \
		../ui/txt/numberargument.h \
		../lib/tree.h \
		../ui/txt/commandtable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o commandtest.o ../ui/txt/test/commandtest.cpp

commandtable.o: ../ui/txt/commandtable.cpp ../ui/txt/commandtable.h \
		../ui/txt/command.h \
		../ui/txt/argument.h \
		../ui/txt/wordargument.h \
		../ui/txt/stringargument.h \
		../ui/txt/numberargument.h \
		../lib/tree.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o commandtable.o ../ui/txt/commandtable.cpp

commandtabletest.o: ../ui/txt/test/commandtabletest.cpp ../ui/txt/test/commandtabletest.h \
		../ui/txt/basecommandtable.h \
		../ui/txt/commandtable.h \
		../ui/txt/command.h \
		../ui/txt/argument.h \
		../ui/txt/wordargument.h \
		../ui/txt/stringargument.h \
		../ui/txt/numberargument.h \
		../lib/tree.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o commandtabletest.o ../ui/txt/test/commandtabletest.cpp

basecommandtable.o: ../ui/txt/basecommandtable.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o basecommandtable.o ../ui/txt/basecommandtable.cpp

moc_signalcatcher.o: moc_signalcatcher.cpp 

moc_comm.o: moc_comm.cpp 

moc_serial_u.o: moc_serial_u.cpp 

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

